## Programa principal prueba de concepto 
## Steve Mena Navarro
## PFG 1 S 2019

## ------------------------------ ##

## Realizar las importaciones de las librerias

import RPi.GPIO as GPIO
import time, sys

##Declarar los puertos del Rpi
	
#Valvulas
vTolva	 	= 2
vMineral 	= 16
vLevadura 	= 27
	
	#Celdas de carga
lAdt 		= 11
lAsck 		= 9
	
lBdt 		= 22
lBsck		= 10
	
	#Motores
mCon		= 7
	
mMinVeloc	= 20
mMinGiro	= 21

mLevVeloc	= 25
mLevGiro	= 26

	#Sesibilidades celdas de carga
sMineral 	= 1
sLevadura 	= 1
sA1			= 1
sA1			= 1
sB1			= 1
sB2			= 1

def inicializaPuertos():
	##inicializar los puertos de RPi
	GPIO.setmode(GPIO.BCM)
	#Valvulas
	GPIO.setup(vTolva,GPIO.OUT)
	GPIO.setup(vMineral,GPIO.OUT)
	GPIO.setup(vLevadura,GPIO.OUT)
		
	#Motores
	GPIO.setup(mCon,GPIO.OUT)
	GPIO.setup(mMinGiro,GPIO.OUT)
	GPIO.setup(mMinVeloc,GPIO.OUT)
	GPIO.setup(mLevGiro,GPIO.OUT)
	GPIO.setup(mLevVeloc,GPIO.OUT)
	
	#Colocar todos los puertos en BAJO
	GPIO.output(vTolva,0)
	GPIO.output(vMineral,0)
	GPIO.output(vLevadura,0)
	
	GPIO.output(mCon,0)
	GPIO.output(mMinGiro,0)
	GPIO.output(mMinVeloc,0)
	
	GPIO.output(mLevGiro,0)
	GPIO.output(mLevVeloc,0)
	
	#Inicializar puertos de motores como PWM
	mMin = GPIO.PWM(mMinVeloc,300)
	mLev = GPIO.PWM(mLevVeloc,300)
	
	##Apagar PWM
	mMin.start(0)
	mLev.start(0)
	
	return (mMin,mLev)


def inicializaCeldas(lAdt,lAsck,lBdt,lBsck,sA1,sA2,sB1,sB2):
		#Celdas de carga
	hxA = HX711(dout_pin=lAdt, pd_sck_pin=lAsck, gain_channel_A=128, select_channel='A')
	hxB = HX711(dout_pin=lBdt, pd_sck_pin=lBsck, gain_channel_A=128, select_channel='A')
		#Inicializa, resetea y tara A
	print("Reseteando A")
	err = hxA.reset() 			#Resetear celdas de carga
    if err:  					# Asegurar que reseteo fue exitoso
        print('A no lista')
    else:
        print('A lista')
    hxA.set_gain_A(gain=64)  	#Configurar ganancia para el canal A
    hxA.select_channel(channel='A')
    hxA.set_scale_ratio(sA1)		#Calibrar celda A
    hxA.zero(readings=30)
    
    hxA.select_channel(channel='B')
    hxA.set_scale_ratio(sA2)
    hxA.zero(readings=30)
    hxA.select_channel(channel='A')
    print("Amplificador A configurado")
    
    ##Configurar amplificador B
    print("Configurando B\nReseteando...")
	err = hxB.reset() 			#Resetear celdas de carga
    if err:  					# Asegurar que reseteo fue exitoso
        print('B no lista')
    else:
        print('B lista')
    hxB.set_gain_A(gain=64)  	#Configurar ganancia para el canal A
    hxB.select_channel(channel='A')
    hxB.set_scale_ratio(sB1)		#Calibrar celda A
    hxB.zero(readings=30)
    
    hxB.select_channel(channel='B')
    hxB.set_scale_ratio(sB2)
    hxB.zero(readings=30)
    hxB.select_channel(channel='A')
    print("Amplificador B configurado")
    
    return(hxA,hxB)
   
def dosificadora(concentrado, mineral, levadura):
		#Inicializa toda la maquina
	try:
		Motores	= inicializaPuertos()
		mMin 	= Inicio[0]
		mLev	= Inicio[1]
			#Resetear celdas de carga y tarar
		HX 		= inicializaCeldas(lAdt,lAsck,lBdt,lBsck,sA1,sA2,sB1,sB2)
		hxA 	= HX[0]
		hxB		= HX[1]
		
			#Encender motores e irlos apagando hasta que se cumplan las dosis
		condicionLev 	= True
		condicionMin	= True
		condicionConc	= True
			#Leer por primera vez las masas de cada uno de los alimentos
		masaCon = 
		masaMin
		masaLev
		while True:

			if(/objMineral<0.90):
				stepperMin.ChangeFrequency(750)
				stepperMin.ChangeDutyCycle(50)

			else:
				if(masaMin/objMineral>=1):
					stepperMin.ChangeFrequency(50)
					stepperMin.ChangeDutyCycle(0)
					condicionMin = False
					#Apagar motor
				else:
					stepperMin.ChangeFrequency(200)
					stepperMin.ChangeDutyCycle(50)
			#---Condiciones motor de levadura ----
			if(masaLev/objLevadura<0.9):
				stepperLev.ChangeFrequency(750)
				stepperLev.ChangeDutyCycle(50)
			else:
				if(masaLev/objLevadura>=1):
					stepperLev.ChangeFrequency(50)
					stepperLev.ChangeDutyCycle(0)
					condicionLev = False
				else:
					stepperLev.ChangeFrequency(200)
					stepperLev.ChangeDutyCycle(50)
			if(condicionMin):
				masaMin = hxMin.get_weight(3)
			if(condicionLev):
				masaLev = hxLev.get_weight(3)
			print(masaLev)
			print(masaMin)
		
		
	finally:
		GPIO.cleanup()
		print("Bye")

	
def abrirTapas():
	
