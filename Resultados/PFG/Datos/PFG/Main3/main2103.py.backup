##Programa prueba de concepto
##Steve Mena Navarro
##8/03/2019
##PFG
##Consuagro

import RPi.GPIO as GPIO, time, sys
from hx711 import HX711  			#Importar la clase HX711
from dosificadora import Dosificadora
#import openpyxl

#Definicion de funciones
def cleanAndExit():
	#Limpiar puertos del GPIO y salir
	print("\tLimpiando...")
	GPIO.cleanup()
	print("\tBye...")
	sys.exit()


def crearListaCeros(filas=58,columnas=3):
	arreglo = [0] * filas
	for i in range(filas):
		arreglo[i] = [None] * columnas
	return arreglo


def obtenerListaVacas(nombreExcel):
	#Funcion para obtener el numero de vaca en el libro de excel
	listaVacas = crearListaCeros()
	print("Cargado libro de balances")
	libro = openpyxl.load_woorbook(nombreExcel)		#Obtener libro excel
	hojaL1 = excel_document.get_sheet_by_name('L1')	#Obtener hoja excel
	
	i = 0
	multiple_cells = sheet['C6':'C64']				#Obtener numeros de vaca
	for row in multiple_cells:
		for cell in row:
			listaVacas[0,i] = cell.value
			i = i+1

	i = 0
	multiple_cells = sheet['H6':'H64']				#Obtener cantidad de VFeed
	for row in multiple_cells:
		for cell in row:
			listaVacas[1,i] = cell.value	
			i = i+1
	i = 0
	multiple_cells = sheet['K6':'K64']				#Obtener cantidad de multiplex
	for row in multiple_cells:
		for cell in row:
			listaVacas[2,i] = cell.value	
			i = i+1
	return listaVacas
#Condicion de parada para cada secuencia de la dosificacion
condicion 		= True
condicionConc 	= True
condicionMin 	= True
condicionLev 	= True
multiplo = 0.80

#Iniciar GPIO del RPi
print("___Programa prototipo de UberCow____\n")
try:
	GPIO.setmode(GPIO.BCM)
	GPIO.setwarnings(False)

	#Inciar la secuencia
	
	##Definir las raciones
	objConc 	= 800
	objMin 		= 50
	objLev		= 10
	
	#Crear objeto Dosificadora
	UberCow 	= Dosificadora()
	UberCow.inicializarPuertos()
	UberCow.inicializarSteppers()
	UberCow.inicializarCeldas()

	print("________________\nSecuencia Iniciada\n________________\n")
	
	UberCow.ahxA.set_offset(0)
	UberCow.ahxB.set_offset(0)
	
	time.sleep(2)
	
	while True:
	
		#Lectura de los datos del usuario.
		objConc		= input("Digite la cantidad de concentrado en g ")
		objMin 		= input("Digite la cantidad de mineral en g ")
		objLev		= input("Digite la cantidad de levadura en g ")

		print("________________\nTarando Concentrado\n________________\n")
		UberCow.tararConcentrado()
		print("Zero A1 ",UberCow.asZeroA1)
		print("Zero A2 ",UberCow.asZeroA2)
		print("Zero B1 ",UberCow.asZeroB1)
		print("Zero B2 ",UberCow.asZeroB2)
		
		print("________________\nTarando Mineral\n________________\n")
		UberCow.tararMineral()
		print("________________\nTarando Levadura\n________________\n")
		UberCow.tararLevadura()
		print("________________\nEncendiendo motores\n________________\n")
		UberCow.tararMineral()
		UberCow.tararConcentrado()
		#Validar si alguno esta encendido y no encender motores del todo.
		if objConc!=0:
			UberCow.encenderMotores('Con')
		else:
			print "Masa igual a 0, concentrado no encendido"
		if objMin!=0:
			UberCow.encenderMotores('Min')
		else:
			print "Masa igual a 0, mineral no encendido"
		if objLev!=0:
			UberCow.encenderMotores('Lev')
		else:	
			print "Masa igual a 0, levadura no encendido"
		
		print("\n____________ Masas ____________\n")
		print("Concentrado\t\tMineral\t\tLevadura\n________________________________")
		##Inicia secuencia del usuario
		while(condicion):
		
			masaConc 		= UberCow.leerConcentrado(3)
			masaMin			= UberCow.leerMineral(3)
			#masaMin		= UberCow.tamizarLectura(masaMin,'Min')
			masaLev			= UberCow.leerLevadura(3)		
			
			print("%s\t%s\t%s"%(str(masaConc),str(masaMin),str(masaLev)))
			
			if((masaConc>(objConc-150)) and (condicionConc)):
				UberCow.apagarMotores('Con',condicionConc	)
				condicionConc 	= False
			#Stepper Mineral
			if((masaMin<objMin) and condicionMin):
				if(masaMin+2>multiplo*objMin):
					UberCow.desacelararSteppers('Min')
			else:
				UberCow.apagarMotores('Min',condicionMin)
				condicionMin 	= False
				
			#Stepper Levadura
			if((masaLev<objLev) and condicionLev):
				if(masaLev>multiplo*objLev):
					UberCow.desacelararSteppers('Lev')
			else:
				UberCow.apagarMotores('Lev',condicionLev)
				condicionLev 	= False			
			
			#Activar pistones
			if(not(condicionConc)and(not(condicionMin))and(not(condicionLev))):
				for i in range(2):
					time.sleep(1)
					UberCow.abrirCerrarValvulas('Min',1)
					UberCow.abrirCerrarValvulas('Lev',1)
					time.sleep(1)
					UberCow.abrirCerrarValvulas('Min',0)
					UberCow.abrirCerrarValvulas('Lev',0)
				

				time.sleep(1)
				UberCow.abrirCerrarValvulas('Tolv',1)
				time.sleep(4)
				UberCow.abrirCerrarValvulas('Tolv',0)
				time.sleep(1)
				UberCow.abrirCerrarValvulas('Tolv',1)
				time.sleep(1)
				UberCow.abrirCerrarValvulas('Tolv',0)
				print("\tDosifcado")
				break
		seguir = input("Desea dosificar otra racion? (1/0) ")
		if (seguir==0):
			break
		elif (seguir==1):
			condicion 		= True
			condicionConc 	= True
			condicionMin 	= True
			condicionLev 	= True
		else:
			print("Caracter no reconocido Abortando")
			break
		
		
except(KeyboardInterrupt,SystemError,SystemExit):
	cleanAndExit()

finally:
	GPIO.cleanup()
	print("Bye")
	
	

